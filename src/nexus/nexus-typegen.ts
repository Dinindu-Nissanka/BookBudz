/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Status: "ADVERTISED" | "DELETED" | "NOT_ADVERTISED" | "SOLD"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  Activity: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    field?: string | null; // String
    newValue?: string | null; // String
    oldValue?: string | null; // String
  }
  Book: { // root type
    activityLog?: Array<NexusGenRootTypes['Activity'] | null> | null; // [Activity]
    createdAt?: NexusGenScalars['Date'] | null; // Date
    id?: string | null; // String
    originalPrice?: number | null; // Int
    sellingPrice?: number | null; // Int
    status?: NexusGenEnums['Status'] | null; // Status
    title?: string | null; // String
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Activity: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    field: string | null; // String
    newValue: string | null; // String
    oldValue: string | null; // String
  }
  Book: { // field return type
    activityLog: Array<NexusGenRootTypes['Activity'] | null> | null; // [Activity]
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // String
    originalPrice: number | null; // Int
    sellingPrice: number | null; // Int
    status: NexusGenEnums['Status'] | null; // Status
    title: string | null; // String
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  Mutation: { // field return type
    createBook: NexusGenRootTypes['Book']; // Book!
    updateBook: NexusGenRootTypes['Book']; // Book!
  }
  Query: { // field return type
    getBooks: Array<NexusGenRootTypes['Book'] | null> | null; // [Book]
  }
}

export interface NexusGenFieldTypeNames {
  Activity: { // field return type name
    createdAt: 'Date'
    field: 'String'
    newValue: 'String'
    oldValue: 'String'
  }
  Book: { // field return type name
    activityLog: 'Activity'
    createdAt: 'Date'
    id: 'String'
    originalPrice: 'Int'
    sellingPrice: 'Int'
    status: 'Status'
    title: 'String'
    updatedAt: 'Date'
  }
  Mutation: { // field return type name
    createBook: 'Book'
    updateBook: 'Book'
  }
  Query: { // field return type name
    getBooks: 'Book'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createBook: { // args
      category: string; // String!
      originalPrice: number; // Int!
      sellingPrice: number; // Int!
      status?: NexusGenEnums['Status'] | null; // Status
      title: string; // String!
    }
    updateBook: { // args
      category?: string | null; // String
      id: string; // String!
      originalPrice?: number | null; // Int
      sellingPrice?: number | null; // Int
      status?: NexusGenEnums['Status'] | null; // Status
      title?: string | null; // String
    }
  }
  Query: {
    getBooks: { // args
      category?: string | null; // String
      originalPrice?: number | null; // Int
      sellingPrice?: number | null; // Int
      status?: NexusGenEnums['Status'] | null; // Status
      title?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}